<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liqinxu.crm.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.liqinxu.crm.domain.Employee">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="realname" property="realname"/>
        <result column="password" property="password"/>
        <result column="tel" property="tel"/>
        <result column="email" property="email"/>
        <result column="hireDate" property="hireDate"/>
        <result column="state" property="state"/>
        <result column="admin" property="admin"/>
        <association columnPrefix="d_" javaType="department" property="dept">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>
    </resultMap>

    <sql id="base_sql">
        <where>
            <if test="keyword!=null">
                (e.username like concat("%",#{keyword},"%") or e.tel like concat("%",#{keyword},"%"))
            </if>
            <if test="deptId!=null">
                and e.dept_id = #{deptId}
            </if>
            <if test="beginDate!=null">
                and e.hireDate &gt;= #{beginDate}
            </if>
            <if test="endDate!=null">
                and e.hireDate &lt;= #{endDate}
            </if>
        </where>
    </sql>
    <delete id="deleteByPrimaryKey">
        DELETE FROM employee
        WHERE id = #{id}
    </delete>
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO employee (username, realname, password, tel, email, dept_id, hireDate,
                              state, admin)
        VALUES (#{username}, #{realname}, #{password}, #{tel}, #{email}, #{dept.id}, #{hireDate},
                #{state}, #{admin})
    </insert>
    <insert id="saveRelation">
        INSERT INTO employee_role (employee_id, role_id) VALUES (#{employeeId}, #{roleId});
    </insert>

    <delete id="deleteRelation">
        DELETE FROM employee_role
        WHERE employee_id = #{employeeId}
    </delete>

    <update id="updateByPrimaryKey">
        UPDATE employee
        SET username = #{username},
            realname = #{realname},
            tel      = #{tel},
            email    = #{email},
            dept_id  = #{dept.id},
            hireDate = #{hireDate},
            admin    = #{admin}
        WHERE id = #{id}
    </update>


    <update id="changeState">
        UPDATE employee
        SET state = state ^ 1
        WHERE id = #{id}
    </update>
    <update id="resetPassword">
        UPDATE employee
        SET password = #{newPassword}
        WHERE id = #{id}
    </update>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
        SELECT
            e.id,
            e.username,
            e.realname,
            e.password,
            e.tel,
            e.email,
            e.hireDate,
            e.state,
            e.admin,
            e.role_id,
            d.id   d_id,
            d.name d_name
        FROM employee e LEFT JOIN department d ON e.dept_id = d.id
        WHERE e.id = #{id}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT
            e.id,
            e.username,
            e.realname,
            e.password,
            e.tel,
            e.email,
            e.hireDate,
            e.state,
            e.admin,
            e.role_id,
            d.id   d_id,
            d.name d_name
        FROM employee e LEFT JOIN department d ON e.dept_id = d.id
    </select>
    <select id="queryForCount" resultType="int">
        SELECT count(e.id)
        FROM employee e
        <include refid="base_sql"/>
    </select>

    <select id="queryForList" resultMap="BaseResultMap">
        SELECT
        e.id,
        e.username,
        e.realname,
        e.password,
        e.tel,
        e.email,
        e.hireDate,
        e.state,
        e.admin,
        e.role_id,
        d.id d_id,
        d.name d_name
        FROM employee e LEFT JOIN department d ON e.dept_id = d.id
        <include refid="base_sql"/>
        LIMIT #{start}, #{rows}
    </select>
    <select id="selectRowsByEmpId" resultType="long">
        SELECT r.id
        FROM employee_role er
            JOIN role r ON er.role_id = r.id
        WHERE er.employee_id = #{empId}
    </select>

    <select id="login" resultType="employee">
        SELECT *
        FROM employee
        WHERE username = #{username}
    </select>
</mapper>